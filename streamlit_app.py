# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ss6h21NXf2Y3SFuBfMREZRl2bKcAltxp
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import warnings

warnings.filterwarnings('ignore')

# Load the saved model and scaler
try:
    model = joblib.load('logistic_regression_model.joblib')
    scaler = joblib.load('scaler.joblib')
except FileNotFoundError:
    st.error("Error: Model or Scaler file not found. Please run 'train_and_save.py' first.")
    st.stop()

# Define the numerical features that were scaled during training
SCALED_FEATURES = ['Age', 'Fare', 'Tickets']

st.title('Titanic Survival Prediction App')
st.markdown("Use the inputs below to predict if a passenger would have survived.")

# --- User Input Fields ---
st.header('Passenger Information')

# Pclass (Ordinal feature, keep as number)
pclass = st.selectbox('Passenger Class (Pclass)', options=[1, 2, 3], index=2, help='1st=Upper, 2nd=Middle, 3rd=Lower')

# Sex (Encoded to 0/1 in training: Female=0, Male=1)
sex_mapping = {'Male': 1, 'Female': 0}
sex = st.selectbox('Sex', options=['Male', 'Female'])
sex_encoded = sex_mapping[sex]

# Age (Numerical feature, scaled)
age = st.slider('Age', 0.42, 80.0, 28.0) # Using min, max, and median from notebook for limits

# SibSp (Discrete feature, keep as number)
sibsp = st.slider('Number of Siblings/Spouses Aboard (SibSp)', 0, 8, 0)

# Parch (Discrete feature, keep as number)
parch = st.slider('Number of Parents/Children Aboard (Parch)', 0, 6, 0)

# Fare (Numerical feature, scaled)
fare = st.number_input('Fare ($)', 0.0, 512.33, 32.20, step=1.0) # Using max and mean from notebook for limits

# Embarked (One-Hot Encoded in training: C, Q, S -> C=0, S=1, Q=1)
embarked = st.selectbox('Port of Embarkation', options=['Southampton (S)', 'Cherbourg (C)', 'Queenstown (Q)'])

# Ticket (Engineered feature, scaled)
# Since the original notebook logic for 'Tickets' is complex and involved string parsing and imputation,
# for the app, we simplify by using a user input for a generic "Ticket Price Indicator" or a mock input.
# Here we use a safe default or simply ask for a numeric value.
tickets_indicator = st.number_input('Ticket Price Indicator (e.g., Last number of Ticket ID)', 0.0, 3200000.0, 100000.0, step=100.0)

# --- Prediction Logic ---
if st.button('Predict Survival'):
    # 1. Create DataFrame from User Input
    data = {
        'Pclass': pclass,
        'Sex': sex_encoded,
        'Age': age,
        'SibSp': sibsp,
        'Parch': parch,
        'Fare': fare,
        'Tickets': tickets_indicator,
    }
    input_df = pd.DataFrame([data])

    # 2. Replicate One-Hot Encoding for 'Embarked'
    input_df['Embarked_Q'] = 1 if 'Q' in embarked else 0
    input_df['Embarked_S'] = 1 if 'S' in embarked else 0

    # 3. Reorder columns to match the model's expected feature order
    expected_columns = model.feature_names_in_
    input_df = input_df.reindex(columns=expected_columns, fill_value=0)

    # 4. Scale Numerical Features
    input_df[SCALED_FEATURES] = scaler.transform(input_df[SCALED_FEATURES])

    # 5. Make Prediction
    prediction = model.predict(input_df)[0]
    prediction_proba = model.predict_proba(input_df)

    st.subheader('Prediction Result')
    if prediction == 1:
        st.success(f'**Result: Survived!**')
        st.balloons()
    else:
        st.error(f'**Result: Did Not Survive.**')

    st.caption(f"Survival Probability: {prediction_proba[0][1]*100:.2f}%")